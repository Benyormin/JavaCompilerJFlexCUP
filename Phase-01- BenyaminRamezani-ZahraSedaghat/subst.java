// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: simple.flex

/* Compiler Project - Part01
Benyamin Ramezani	980122680008
Zahra Sedaghat	990122681003
 */



@SuppressWarnings("fallthrough")
public class subst {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\0\1\3\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\40\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\40\1\57\1\60"+
    "\1\61\1\0\1\62\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\40\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\40\1\63\1\64"+
    "\1\65\262\0\2\66\115\0\1\67\u01aa\0\1\70\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\20\26\1\27"+
    "\1\30\1\31\1\32\1\33\4\1\1\34\1\0\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\0\1\53"+
    "\1\54\1\55\1\56\1\57\10\26\1\60\6\26\1\0"+
    "\1\61\20\26\1\62\1\61\7\0\1\35\3\0\2\51"+
    "\1\63\1\26\1\0\11\26\1\0\4\26\1\64\1\0"+
    "\1\26\1\65\2\26\1\66\3\26\1\0\5\26\1\0"+
    "\2\26\1\0\1\67\1\70\1\26\1\0\1\26\2\0"+
    "\1\65\3\0\1\71\1\26\1\0\3\26\1\72\4\26"+
    "\2\73\1\74\3\26\1\0\4\26\1\75\1\26\1\0"+
    "\3\26\2\0\5\26\1\0\2\76\1\26\2\77\1\26"+
    "\7\0\1\26\1\0\1\26\2\100\1\101\1\102\1\26"+
    "\1\0\3\26\1\103\1\104\1\103\5\26\1\0\3\26"+
    "\2\0\1\26\1\0\1\26\1\105\1\26\1\0\1\26"+
    "\1\0\1\26\2\106\4\0\1\105\1\26\1\0\2\26"+
    "\1\0\1\26\1\107\2\26\1\110\3\26\1\0\3\26"+
    "\2\0\2\111\1\112\2\113\2\114\2\115\1\0\1\110"+
    "\2\0\1\26\1\0\1\116\1\26\1\0\1\117\2\120"+
    "\2\26\1\121\2\122\1\123\1\124\1\26\1\123\1\124"+
    "\2\0\1\121\2\125\2\126\3\26\2\0\1\26\1\127"+
    "\1\130\1\0\1\127\2\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\162\0\162\0\162\0\u01c8\0\u0201\0\162\0\u023a\0\162"+
    "\0\u0273\0\u02ac\0\u02e5\0\162\0\u031e\0\u0357\0\u0390\0\u03c9"+
    "\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\162"+
    "\0\162\0\162\0\u0759\0\162\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\162\0\u011d\0\162\0\u0876\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\u08af\0\162\0\u08e8\0\u0921"+
    "\0\162\0\u095a\0\162\0\162\0\162\0\162\0\162\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u051f"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\162\0\162\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u011d\0\u1242\0\u08e8\0\u127b\0\162\0\u12b4\0\u095a"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u051f\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u051f\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u051f\0\u051f\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1242"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u051f\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u051f\0\162\0\u051f\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u051f\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u051f\0\162\0\u232e\0\u051f\0\162"+
    "\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u051f\0\162\0\u051f\0\u051f\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u051f\0\u051f\0\162\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u051f\0\u2a15\0\u2a4e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u051f\0\162\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\162\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u051f\0\u2d6c\0\u2da5\0\u051f\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u051f\0\162\0\u051f"+
    "\0\u051f\0\162\0\u051f\0\162\0\u051f\0\162\0\u2fdf\0\162"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u051f\0\u30fc\0\u3135\0\u051f"+
    "\0\u051f\0\162\0\u316e\0\u31a7\0\u051f\0\u051f\0\162\0\u051f"+
    "\0\u051f\0\u31e0\0\162\0\162\0\u3219\0\u3252\0\162\0\u051f"+
    "\0\162\0\u051f\0\162\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u051f\0\u051f\0\u33e1\0\162\0\u051f\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\37\2\36\1\40"+
    "\1\36\1\41\1\36\1\42\1\43\1\44\1\45\1\36"+
    "\1\46\1\47\2\36\1\50\1\3\1\51\1\3\1\52"+
    "\1\53\1\54\1\55\1\56\14\3\1\57\4\3\1\60"+
    "\50\3\72\0\2\4\113\0\1\61\43\0\2\62\2\0"+
    "\1\62\1\63\52\62\1\64\10\62\25\0\1\65\52\0"+
    "\1\66\74\0\1\67\4\0\1\70\4\0\1\71\57\0"+
    "\1\72\4\0\1\22\3\0\1\73\61\0\1\74\2\0"+
    "\1\75\3\0\1\76\56\0\1\77\4\0\1\100\4\0"+
    "\1\101\62\0\1\102\1\0\1\22\74\0\1\103\70\0"+
    "\1\104\1\105\67\0\1\106\70\0\1\107\64\0\1\36"+
    "\5\0\1\36\1\110\26\36\3\0\1\36\27\0\1\36"+
    "\5\0\16\36\1\111\1\36\1\112\7\36\3\0\1\36"+
    "\27\0\1\36\5\0\1\113\6\36\1\114\3\36\1\115"+
    "\2\36\1\116\11\36\3\0\1\36\27\0\1\36\5\0"+
    "\4\36\1\117\11\36\1\120\11\36\3\0\1\36\27\0"+
    "\1\36\5\0\13\36\1\121\1\36\1\122\10\36\1\123"+
    "\1\36\3\0\1\36\27\0\1\36\5\0\10\36\1\124"+
    "\2\36\1\125\2\36\1\126\11\36\3\0\1\36\3\0"+
    "\1\127\23\0\1\36\5\0\30\36\3\0\1\36\27\0"+
    "\1\36\5\0\5\36\1\130\6\36\1\131\1\132\12\36"+
    "\3\0\1\36\27\0\1\36\5\0\16\36\1\133\11\36"+
    "\3\0\1\36\27\0\1\36\5\0\4\36\1\134\23\36"+
    "\3\0\1\36\27\0\1\36\5\0\1\135\17\36\1\136"+
    "\2\36\1\137\4\36\3\0\1\36\27\0\1\36\5\0"+
    "\4\36\1\140\23\36\3\0\1\36\27\0\1\36\5\0"+
    "\7\36\1\141\12\36\1\142\2\36\1\143\2\36\3\0"+
    "\1\36\27\0\1\36\5\0\7\36\1\144\10\36\1\145"+
    "\7\36\3\0\1\36\27\0\1\36\5\0\1\146\15\36"+
    "\1\147\11\36\3\0\1\36\27\0\1\36\5\0\7\36"+
    "\1\150\20\36\3\0\1\36\72\0\1\151\40\0\1\152"+
    "\6\0\1\153\1\154\62\0\1\155\12\0\1\156\2\0"+
    "\1\157\34\0\1\70\63\0\1\77\4\0\1\100\50\0"+
    "\1\62\1\160\2\161\1\62\1\162\52\62\1\64\10\62"+
    "\17\0\1\163\1\0\1\75\47\0\13\164\1\165\55\164"+
    "\2\100\1\166\1\167\65\100\21\0\1\170\70\0\1\36"+
    "\5\0\21\36\1\171\6\36\3\0\1\36\4\0\1\172"+
    "\22\0\1\36\5\0\16\36\1\173\11\36\3\0\1\36"+
    "\27\0\1\36\5\0\4\36\1\174\23\36\3\0\1\36"+
    "\27\0\1\36\5\0\22\36\1\175\5\36\3\0\1\36"+
    "\27\0\1\36\5\0\1\176\27\36\3\0\1\36\27\0"+
    "\1\36\5\0\4\36\1\177\23\36\3\0\1\36\27\0"+
    "\1\36\5\0\15\36\1\200\12\36\3\0\1\36\27\0"+
    "\1\36\5\0\5\36\1\201\22\36\3\0\1\36\27\0"+
    "\1\36\5\0\23\36\1\202\4\36\3\0\1\36\27\0"+
    "\1\36\5\0\21\36\1\203\6\36\3\0\1\36\4\0"+
    "\1\204\22\0\1\36\5\0\23\36\1\205\4\36\3\0"+
    "\1\36\27\0\1\36\5\0\22\36\1\206\5\36\3\0"+
    "\1\36\27\0\1\36\5\0\15\36\1\207\12\36\3\0"+
    "\1\36\27\0\1\36\5\0\16\36\1\210\11\36\3\0"+
    "\1\36\27\0\1\36\5\0\20\36\1\211\7\36\3\0"+
    "\1\36\52\0\1\212\45\0\1\36\5\0\17\36\1\213"+
    "\10\36\3\0\1\36\27\0\1\36\5\0\22\36\1\214"+
    "\1\215\4\36\3\0\1\36\27\0\1\36\5\0\15\36"+
    "\1\216\12\36\3\0\1\36\27\0\1\36\5\0\25\36"+
    "\1\217\2\36\3\0\1\36\27\0\1\36\5\0\2\36"+
    "\1\220\25\36\3\0\1\36\27\0\1\36\5\0\10\36"+
    "\1\221\5\36\1\222\11\36\3\0\1\36\3\0\1\223"+
    "\23\0\1\36\5\0\1\36\1\224\26\36\3\0\1\36"+
    "\27\0\1\36\5\0\22\36\1\225\5\36\3\0\1\36"+
    "\27\0\1\36\5\0\16\36\1\226\11\36\3\0\1\36"+
    "\27\0\1\36\5\0\1\227\27\36\3\0\1\36\27\0"+
    "\1\36\5\0\10\36\1\230\17\36\3\0\1\36\3\0"+
    "\1\231\23\0\1\36\5\0\10\36\1\232\7\36\1\233"+
    "\7\36\3\0\1\36\3\0\1\234\23\0\1\36\5\0"+
    "\27\36\1\235\3\0\1\36\27\0\1\36\5\0\20\36"+
    "\1\236\7\36\3\0\1\36\27\0\1\36\5\0\10\36"+
    "\1\237\17\36\3\0\1\36\3\0\1\240\23\0\1\36"+
    "\5\0\10\36\1\241\17\36\3\0\1\36\3\0\1\242"+
    "\50\0\1\243\73\0\1\244\1\245\63\0\1\246\52\0"+
    "\1\247\100\0\1\231\26\0\1\231\2\0\1\62\1\160"+
    "\2\161\1\62\1\63\52\62\1\64\10\62\1\0\3\161"+
    "\54\0\1\62\31\0\1\250\47\0\13\164\1\165\4\164"+
    "\1\166\50\164\2\0\1\166\107\0\1\36\5\0\22\36"+
    "\1\251\5\36\3\0\1\36\57\0\1\252\40\0\1\36"+
    "\5\0\13\36\1\253\14\36\3\0\1\36\27\0\1\36"+
    "\5\0\1\254\27\36\3\0\1\36\27\0\1\36\5\0"+
    "\2\36\1\255\25\36\3\0\1\36\27\0\1\36\5\0"+
    "\20\36\1\256\7\36\3\0\1\36\27\0\1\36\5\0"+
    "\1\257\27\36\3\0\1\36\27\0\1\36\5\0\22\36"+
    "\1\260\5\36\3\0\1\36\27\0\1\36\5\0\1\261"+
    "\27\36\3\0\1\36\27\0\1\36\5\0\1\36\1\262"+
    "\26\36\3\0\1\36\27\0\1\36\5\0\4\36\1\263"+
    "\23\36\3\0\1\36\41\0\1\264\56\0\1\36\5\0"+
    "\14\36\1\265\13\36\3\0\1\36\27\0\1\36\5\0"+
    "\4\36\1\266\23\36\3\0\1\36\27\0\1\36\5\0"+
    "\1\267\27\36\3\0\1\36\27\0\1\36\5\0\1\270"+
    "\27\36\3\0\1\36\35\0\1\271\62\0\1\36\5\0"+
    "\13\36\1\272\2\36\1\273\11\36\3\0\1\36\27\0"+
    "\1\36\5\0\4\36\1\274\23\36\3\0\1\36\27\0"+
    "\1\36\5\0\14\36\1\275\13\36\3\0\1\36\27\0"+
    "\1\36\5\0\6\36\1\276\21\36\3\0\1\36\27\0"+
    "\1\36\5\0\12\36\1\277\15\36\3\0\1\36\5\0"+
    "\1\300\21\0\1\36\5\0\15\36\1\301\6\36\1\302"+
    "\3\36\3\0\1\36\27\0\1\36\5\0\22\36\1\303"+
    "\5\36\3\0\1\36\52\0\1\304\6\0\1\305\36\0"+
    "\1\36\5\0\13\36\1\306\14\36\3\0\1\36\27\0"+
    "\1\36\5\0\23\36\1\307\4\36\3\0\1\36\27\0"+
    "\1\36\5\0\20\36\1\310\7\36\3\0\1\36\27\0"+
    "\1\36\5\0\22\36\1\311\5\36\3\0\1\36\27\0"+
    "\1\36\5\0\22\36\1\312\5\36\3\0\1\36\57\0"+
    "\1\313\40\0\1\36\5\0\21\36\1\314\6\36\3\0"+
    "\1\36\4\0\1\315\22\0\1\36\5\0\16\36\1\316"+
    "\11\36\3\0\1\36\56\0\1\315\16\0\1\315\22\0"+
    "\1\36\5\0\3\36\1\317\24\36\3\0\1\36\40\0"+
    "\1\320\57\0\1\36\5\0\13\36\1\321\14\36\3\0"+
    "\1\36\50\0\1\322\70\0\1\323\2\0\1\324\56\0"+
    "\1\325\100\0\1\326\74\0\1\327\72\0\1\330\40\0"+
    "\1\36\5\0\20\36\1\331\7\36\3\0\1\36\55\0"+
    "\1\332\42\0\1\36\5\0\4\36\1\333\23\36\3\0"+
    "\1\36\27\0\1\36\5\0\12\36\1\334\15\36\3\0"+
    "\1\36\5\0\1\335\21\0\1\36\5\0\7\36\1\336"+
    "\20\36\3\0\1\36\27\0\1\36\5\0\20\36\1\337"+
    "\7\36\3\0\1\36\27\0\1\36\5\0\10\36\1\340"+
    "\17\36\3\0\1\36\3\0\1\341\23\0\1\36\5\0"+
    "\23\36\1\342\4\36\3\0\1\36\27\0\1\36\5\0"+
    "\13\36\1\343\14\36\3\0\1\36\27\0\1\36\5\0"+
    "\15\36\1\344\12\36\3\0\1\36\27\0\1\36\5\0"+
    "\13\36\1\345\14\36\3\0\1\36\27\0\1\36\5\0"+
    "\22\36\1\346\5\36\3\0\1\36\50\0\1\347\47\0"+
    "\1\36\5\0\4\36\1\350\23\36\3\0\1\36\27\0"+
    "\1\36\5\0\20\36\1\351\7\36\3\0\1\36\27\0"+
    "\1\36\5\0\20\36\1\352\7\36\3\0\1\36\27\0"+
    "\1\36\5\0\1\36\1\353\26\36\3\0\1\36\27\0"+
    "\1\36\5\0\1\354\27\36\3\0\1\36\35\0\1\355"+
    "\62\0\1\36\5\0\22\36\1\356\5\36\3\0\1\36"+
    "\27\0\1\36\5\0\1\357\27\36\3\0\1\36\27\0"+
    "\1\36\5\0\4\36\1\360\23\36\3\0\1\36\57\0"+
    "\1\361\46\0\1\362\62\0\1\36\5\0\10\36\1\363"+
    "\17\36\3\0\1\36\3\0\1\364\23\0\1\36\5\0"+
    "\20\36\1\365\7\36\3\0\1\36\27\0\1\36\5\0"+
    "\22\36\1\366\5\36\3\0\1\36\27\0\1\36\5\0"+
    "\10\36\1\367\17\36\3\0\1\36\3\0\1\370\23\0"+
    "\1\36\5\0\2\36\1\371\25\36\3\0\1\36\37\0"+
    "\1\372\60\0\1\36\5\0\25\36\1\373\2\36\3\0"+
    "\1\36\27\0\1\36\5\0\4\36\1\374\23\36\3\0"+
    "\1\36\41\0\1\375\70\0\1\376\104\0\1\377\70\0"+
    "\1\u0100\51\0\1\u0101\111\0\1\u0102\56\0\1\370\26\0"+
    "\1\370\23\0\1\36\5\0\1\u0103\27\36\3\0\1\36"+
    "\35\0\1\u0104\62\0\1\36\5\0\1\u0105\27\36\3\0"+
    "\1\36\27\0\1\36\5\0\15\36\1\u0106\12\36\3\0"+
    "\1\36\52\0\1\u0107\45\0\1\36\5\0\13\36\1\u0108"+
    "\14\36\3\0\1\36\27\0\1\36\5\0\4\36\1\u0109"+
    "\23\36\3\0\1\36\27\0\1\36\5\0\3\36\1\u010a"+
    "\24\36\3\0\1\36\27\0\1\36\5\0\14\36\1\u010b"+
    "\13\36\3\0\1\36\27\0\1\36\5\0\22\36\1\u010c"+
    "\5\36\3\0\1\36\27\0\1\36\5\0\5\36\1\u010d"+
    "\22\36\3\0\1\36\27\0\1\36\5\0\4\36\1\u010e"+
    "\23\36\3\0\1\36\27\0\1\36\5\0\6\36\1\u010f"+
    "\21\36\3\0\1\36\43\0\1\u0110\54\0\1\36\5\0"+
    "\13\36\1\u0111\14\36\3\0\1\36\27\0\1\36\5\0"+
    "\22\36\1\u0112\5\36\3\0\1\36\27\0\1\36\5\0"+
    "\2\36\1\u0113\25\36\3\0\1\36\50\0\1\u0114\77\0"+
    "\1\u0115\40\0\1\36\5\0\2\36\1\u0116\25\36\3\0"+
    "\1\36\37\0\1\u0117\60\0\1\36\5\0\15\36\1\u0118"+
    "\12\36\3\0\1\36\27\0\1\36\5\0\2\36\1\u0119"+
    "\25\36\3\0\1\36\37\0\1\u011a\60\0\1\36\5\0"+
    "\7\36\1\u011b\20\36\3\0\1\36\44\0\1\u011c\53\0"+
    "\1\36\5\0\21\36\1\u011d\6\36\3\0\1\36\4\0"+
    "\1\u011e\44\0\1\u011f\76\0\1\u0120\53\0\1\u0121\67\0"+
    "\1\u0122\56\0\1\36\5\0\2\36\1\u0123\25\36\3\0"+
    "\1\36\37\0\1\u0124\60\0\1\36\5\0\15\36\1\u0125"+
    "\12\36\3\0\1\36\27\0\1\36\5\0\23\36\1\u0126"+
    "\4\36\3\0\1\36\60\0\1\u0127\37\0\1\36\5\0"+
    "\22\36\1\u0128\5\36\3\0\1\36\27\0\1\36\5\0"+
    "\21\36\1\u0129\6\36\3\0\1\36\4\0\1\u012a\22\0"+
    "\1\36\5\0\4\36\1\u012b\23\36\3\0\1\36\27\0"+
    "\1\36\5\0\1\u012c\27\36\3\0\1\36\27\0\1\36"+
    "\5\0\20\36\1\u012d\7\36\3\0\1\36\27\0\1\36"+
    "\5\0\4\36\1\u012e\23\36\3\0\1\36\41\0\1\u012f"+
    "\56\0\1\36\5\0\15\36\1\u0130\12\36\3\0\1\36"+
    "\27\0\1\36\5\0\4\36\1\u0131\23\36\3\0\1\36"+
    "\27\0\1\36\5\0\22\36\1\u0132\5\36\3\0\1\36"+
    "\52\0\1\u0133\57\0\1\u0134\70\0\1\u0135\64\0\1\u0136"+
    "\110\0\1\u0137\42\0\1\36\5\0\22\36\1\u0138\5\36"+
    "\3\0\1\36\57\0\1\u0139\40\0\1\36\5\0\4\36"+
    "\1\u013a\23\36\3\0\1\36\41\0\1\u013b\56\0\1\36"+
    "\5\0\15\36\1\u013c\12\36\3\0\1\36\27\0\1\36"+
    "\5\0\2\36\1\u013d\25\36\3\0\1\36\27\0\1\36"+
    "\5\0\4\36\1\u013e\23\36\3\0\1\36\52\0\1\u013f"+
    "\55\0\1\u0140\60\0\1\36\5\0\22\36\1\u0141\5\36"+
    "\3\0\1\36\27\0\1\36\5\0\4\36\1\u0142\23\36"+
    "\3\0\1\36\27\0\1\36\5\0\3\36\1\u0143\24\36"+
    "\3\0\1\36\57\0\1\u0144\52\0\1\u0145\56\0\1\36"+
    "\5\0\21\36\1\u0146\6\36\3\0\1\36\4\0\1\u0147"+
    "\51\0\1\u0147\16\0\1\u0147\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13338];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\3\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\23\1\3\11\1\1\1\11\4\1\1\11"+
    "\1\0\1\11\1\0\10\11\1\1\1\11\2\1\1\11"+
    "\1\0\5\11\17\1\1\0\21\1\2\11\7\0\1\1"+
    "\3\0\1\11\3\1\1\0\11\1\1\0\5\1\1\0"+
    "\10\1\1\0\5\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\3\0\2\1\1\0\11\1\1\11"+
    "\4\1\1\0\6\1\1\0\3\1\2\0\5\1\1\0"+
    "\1\1\1\11\2\1\1\11\1\1\7\0\1\1\1\0"+
    "\2\1\1\11\3\1\1\0\5\1\1\11\5\1\1\0"+
    "\3\1\2\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\11\4\0\1\11\1\1\1\0\2\1\1\0"+
    "\10\1\1\0\3\1\2\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\1\11\2\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\11\4\1\1\11\3\1"+
    "\2\11\2\0\1\11\1\1\1\11\1\1\1\11\3\1"+
    "\2\0\3\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0 ;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public subst(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 90: break;
          case 2:
            { System.out.println("Whitespace: line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 91: break;
          case 3:
            { System.out.println("Operator: \"Logical Not\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 92: break;
          case 4:
            { System.out.println("Operator: \"Double quotation\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 93: break;
          case 5:
            { System.out.println("Operator: \"MODULUS Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 94: break;
          case 6:
            { System.out.println("Operator: \"And\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 95: break;
          case 7:
            { System.out.println("Operator: \"Single Quotation\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 96: break;
          case 8:
            { System.out.println("Operator: \"Opening paranthesis\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 97: break;
          case 9:
            { System.out.println("Operator: \"Closing parenthesis\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 98: break;
          case 10:
            { System.out.println("Operator: \"MULTIPLICATION Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 99: break;
          case 11:
            { System.out.println("Operator: \"ADDITION Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 100: break;
          case 12:
            { System.out.println("Operator: \"Comma\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 101: break;
          case 13:
            { System.out.println("Operator: \"SUBTRACTION Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 102: break;
          case 14:
            { System.out.println("Operator: \"Period\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 103: break;
          case 15:
            { System.out.println("Operator: \"DIVISION Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 104: break;
          case 16:
            { System.out.println("Positive Integer: " + "\"" + yytext() + "\"" + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 105: break;
          case 17:
            { System.out.println("Operator: \"Colon\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 106: break;
          case 18:
            { System.out.println("Operator: \"Semicolon\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 107: break;
          case 19:
            { System.out.println("Operator: \"Less than\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 108: break;
          case 20:
            { System.out.println("Operator: \"ASSIGNMENT Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 109: break;
          case 21:
            { System.out.println("Operator: \"Greater that\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 110: break;
          case 22:
            { System.out.println("Identifier: " + "\"" + yytext() + "\"" + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 111: break;
          case 23:
            { System.out.println("Operator: \"Opening bracket\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 112: break;
          case 24:
            { System.out.println("Operator: \"Closing bracket\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 113: break;
          case 25:
            { System.out.println("Operator: \"Opening brace\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 114: break;
          case 26:
            { System.out.println("Operator: \"Or\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 115: break;
          case 27:
            { System.out.println("Operator: \"Closing brace\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 116: break;
          case 28:
            { System.out.println("Operator: \"Not Equal\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 117: break;
          case 29:
            { String str =  yytext().substring(1,yylength()-1);
    System.out.println ("String: " + "\"" + str + "\"" + " line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 118: break;
          case 30:
            { System.out.println("Operator: \"MODULUS Assignment\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 119: break;
          case 31:
            { System.out.println("Operator: \"Logical And\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 120: break;
          case 32:
            { System.out.println("Operator: \"POWER Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 121: break;
          case 33:
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
          // fall through
          case 122: break;
          case 34:
            { System.out.println("Operator: \"MULTIPLICATION Assignment\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 123: break;
          case 35:
            { System.out.println("Operator: \"INCREMENTAL Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 124: break;
          case 36:
            { System.out.println("Operator: \"ADDITION Assignment\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 125: break;
          case 37:
            { System.out.println("Operator: \"DECREMENTAL Statement\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 126: break;
          case 38:
            { System.out.println("Negative Integer: " + "\"" + yytext() + "\"" + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 127: break;
          case 39:
            { System.out.println("Operator: \"SUBTRACTION Assignment\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 128: break;
          case 40:
            { comment_count++;
            }
          // fall through
          case 129: break;
          case 41:
            { System.out.println("Comment: " + "\n" + yytext() + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 130: break;
          case 42:
            { System.out.println("Operator: \"DIVISION Assignment\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 131: break;
          case 43:
            { System.out.println("Operator: \":= Sign\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 132: break;
          case 44:
            { System.out.println("Operator: \"Less than or Equal to\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 133: break;
          case 45:
            { System.out.println("Operator: \"<> Sign\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 134: break;
          case 46:
            { System.out.println("Operator: \"Equal to\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 135: break;
          case 47:
            { System.out.println("Operator: \"Greater than or Equal to\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 136: break;
          case 48:
            { System.out.println("Keyword: \"do\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 137: break;
          case 49:
            { System.out.println("Keyword: \"if\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 138: break;
          case 50:
            { System.out.println("Operator: \"Logical Or\" line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 139: break;
          case 51:
            { System.out.println("Positive Float: " + "\"" + yytext() + "\"" + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 140: break;
          case 52:
            { System.out.println("Keyword: \"for\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 141: break;
          case 53:
            { System.out.println("Keyword: \"int\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 142: break;
          case 54:
            { System.out.println("Keyword: \"new\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 143: break;
          case 55:
            { System.out.println("Keyword: \"try\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 144: break;
          case 56:
            { System.out.println("Keyword: \"var\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 145: break;
          case 57:
            { System.out.println("Negative Float: " + "\"" + yytext() + "\"" + " line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 146: break;
          case 58:
            { System.out.println("Keyword: \"char\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 147: break;
          case 59:
            { System.out.println("Keyword: \"else\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 148: break;
          case 60:
            { System.out.println("Keyword: \"enum\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 149: break;
          case 61:
            { System.out.println("Keyword: \"long\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 150: break;
          case 62:
            { System.out.println("Keyword: \"this\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 151: break;
          case 63:
            { System.out.println("Keyword: \"void\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 152: break;
          case 64:
            { System.out.println("Keyword: \"break\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 153: break;
          case 65:
            { System.out.println("Keyword: \"catch\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 154: break;
          case 66:
            { System.out.println("Reserved word: \"clear\" line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 155: break;
          case 67:
            { System.out.println("Keyword: \"final\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 156: break;
          case 68:
            { System.out.println("Keyword: \"float\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 157: break;
          case 69:
            { System.out.println("Keyword: \"short\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 158: break;
          case 70:
            { System.out.println("Keyword: \"while\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 159: break;
          case 71:
            { System.out.println("Keyword: \"double\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 160: break;
          case 72:
            { System.out.println("Keyword: \"import\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 161: break;
          case 73:
            { System.out.println("Keyword: \"public\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 162: break;
          case 74:
            { System.out.println("Keyword: \"return\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 163: break;
          case 75:
            { System.out.println("Keyword: \"static\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 164: break;
          case 76:
            { System.out.println("Keyword: \"switch\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 165: break;
          case 77:
            { System.out.println("Keyword: \"throws\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 166: break;
          case 78:
            { System.out.println("Keyword: \"boolean\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 167: break;
          case 79:
            { System.out.println("Keyword: \"default\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 168: break;
          case 80:
            { System.out.println("Keyword: \"extends\" "+  "line" + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 169: break;
          case 81:
            { System.out.println("Reserved word: \"inumber\" line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 170: break;
          case 82:
            { System.out.println("Keyword: \"package\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 171: break;
          case 83:
            { System.out.println("Reserved word: \"println\" line " + (yyline + 1) +  " | "+ "column " + (yycolumn + 1));
            }
          // fall through
          case 172: break;
          case 84:
            { System.out.println("Keyword: \"private\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 173: break;
          case 85:
            { System.out.println("Keyword: \"abstract\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 174: break;
          case 86:
            { System.out.println("Keyword: \"continue\" "+  "line " + (yyline + 1) + " | " + "column " + (yycolumn + 1));
            }
          // fall through
          case 175: break;
          case 87:
            { System.out.println("Keyword: \"interface\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 176: break;
          case 88:
            { System.out.println("Keyword: \"protected\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 177: break;
          case 89:
            { System.out.println("Keyword: \"implements\" "+  "line" + (yyline + 1) + " | " + "column" + (yycolumn + 1));
            }
          // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java subst [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        subst scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new subst(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
