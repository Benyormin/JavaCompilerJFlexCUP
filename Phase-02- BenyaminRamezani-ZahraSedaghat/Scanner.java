// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: java.flex

/* Compiler Project - Part01
Benyamin Ramezani	980122680008
Zahra Sedaghat	990122681003
 */

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Scanner extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\3\u2000"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u2000\1\u4000\1\u4100"+
    "\4\u2000\1\u4200\11\u2000\3\u1100\1\u4300\1\u4400\13\u2000\4\u1100"+
    "\1\u4500\63\u2000\2\u1100\1\u4600\4\u2000\1\u4700\100\u2000\1\u4800"+
    "\40\u2000\1\u4900\1\u4a00\1\u2000\1\u4b00\1\u4c00\1\u4d00\1\u4e00"+
    "\26\u2000\1\u4f00\21\u2000\246\u1100\1\u5000\20\u1100\1\u5100\1\u5200"+
    "\77\u2000\2\u1100\1\u5200\u0b05\u2000\1\u5300\1\u5400\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\6\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\11\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\11"+
    "\1\6\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\11\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\102\1\103\1\104\1\105\6\0"+
    "\1\106\32\0\2\6\4\11\4\6\1\11\2\6\1\0"+
    "\7\6\1\11\4\6\1\11\5\6\27\11\1\6\37\11"+
    "\1\6\70\11\2\55\115\11\1\66\u0142\11\4\6\14\11"+
    "\16\6\5\11\7\6\1\11\1\6\1\11\21\6\160\0"+
    "\5\11\1\6\2\11\2\6\4\11\10\6\1\11\1\6"+
    "\3\11\1\6\1\11\1\6\24\11\1\6\123\11\1\6"+
    "\213\11\1\6\5\0\2\6\236\11\11\6\46\11\2\6"+
    "\1\11\7\6\47\11\7\6\1\11\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\11\5\6\3\11\15\6\5\0\6\6\1\11\4\6"+
    "\13\0\5\6\53\11\37\0\4\6\2\11\1\0\143\11"+
    "\1\6\1\11\10\0\1\6\6\0\2\11\2\0\1\6"+
    "\4\0\2\11\12\0\3\11\2\6\1\11\17\6\1\0"+
    "\1\11\1\0\36\11\33\0\2\6\131\11\13\0\1\11"+
    "\16\6\12\0\41\11\11\0\2\11\4\6\1\11\5\6"+
    "\26\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\6\31\11\3\0\104\6\1\11\1\6\13\11\67\6"+
    "\33\0\1\6\4\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\6\12\0\1\6\7\11\1\6"+
    "\7\11\1\6\3\0\1\6\10\11\2\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\1\11\3\6\4\11\2\6"+
    "\1\0\1\11\7\0\2\6\2\0\2\6\3\0\1\11"+
    "\10\6\1\0\4\6\2\11\1\6\3\11\2\0\2\6"+
    "\12\0\4\11\7\6\1\11\5\6\3\0\1\6\6\11"+
    "\4\6\2\11\2\6\26\11\1\6\7\11\1\6\2\11"+
    "\1\6\2\11\1\6\2\11\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\11"+
    "\1\6\1\11\7\6\14\0\3\11\1\0\13\6\3\0"+
    "\1\6\11\11\1\6\3\11\1\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\10\0"+
    "\1\6\3\0\1\6\3\0\2\6\1\11\17\6\2\11"+
    "\2\0\2\6\12\0\1\6\1\11\17\6\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\2\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\1\6\1\11\20\6\1\0"+
    "\1\11\1\6\6\11\3\6\3\11\1\6\4\11\3\6"+
    "\2\11\1\6\1\11\1\6\2\11\3\6\2\11\3\6"+
    "\3\11\3\6\14\11\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\11\6\6\1\0\16\6\12\0\11\6"+
    "\1\11\7\6\3\0\1\6\10\11\1\6\3\11\1\6"+
    "\27\11\1\6\12\11\1\6\5\11\3\6\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\2\11"+
    "\6\6\2\11\2\0\2\6\12\0\22\6\2\0\1\6"+
    "\10\11\1\6\3\11\1\6\27\11\1\6\12\11\1\6"+
    "\5\11\2\6\1\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\11\1\6\2\11\2\0"+
    "\2\6\12\0\1\6\2\11\17\6\2\0\1\6\10\11"+
    "\1\6\3\11\1\6\51\11\2\6\1\11\7\0\1\6"+
    "\3\0\1\6\4\0\1\11\10\6\1\0\10\6\2\11"+
    "\2\0\2\6\12\0\12\6\6\11\2\6\2\0\1\6"+
    "\22\11\3\6\30\11\1\6\11\11\1\6\1\11\2\6"+
    "\7\11\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\22\6\2\0\15\6\60\11\1\0\2\11\7\0"+
    "\4\6\10\11\10\0\1\6\12\0\47\6\2\11\1\6"+
    "\1\11\2\6\2\11\1\6\1\11\2\6\1\11\6\6"+
    "\4\11\1\6\7\11\1\6\3\11\1\6\1\11\1\6"+
    "\1\11\2\6\2\11\1\6\4\11\1\0\2\11\6\0"+
    "\1\6\2\0\1\11\2\6\5\11\1\6\1\11\1\6"+
    "\6\0\2\6\12\0\2\6\4\11\40\6\1\11\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\11\1\6\44\11\4\6\24\0"+
    "\1\6\2\0\5\11\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\11\24\0\1\11\12\0\6\6\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\53\11\1\6\u014d\11\1\6\4\11"+
    "\2\6\7\11\1\6\1\11\1\6\4\11\2\6\51\11"+
    "\1\6\4\11\2\6\41\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\17\11\1\6\71\11"+
    "\1\6\4\11\2\6\103\11\2\6\3\0\40\6\20\11"+
    "\20\6\125\11\14\6\u016c\11\2\6\21\11\1\6\32\11"+
    "\5\6\113\11\3\6\3\11\17\6\15\11\1\6\4\11"+
    "\3\0\13\6\22\11\3\0\13\6\22\11\2\0\14\6"+
    "\15\11\1\6\3\11\1\6\2\0\14\6\64\11\40\0"+
    "\3\6\1\11\3\6\2\11\1\0\2\6\12\0\41\6"+
    "\3\0\2\6\12\0\6\6\130\11\10\6\51\11\1\0"+
    "\1\11\5\6\106\11\12\6\35\11\3\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\11\2\6\5\11\13\6\54\11"+
    "\4\6\21\0\7\11\2\0\6\6\12\0\46\6\27\11"+
    "\5\0\4\6\65\11\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\11\130\6\5\0\57\11\21\0"+
    "\7\11\4\6\12\0\21\6\11\0\14\6\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\6\44\11\24\0"+
    "\10\6\12\0\3\6\3\11\12\0\44\11\122\6\3\0"+
    "\1\6\25\0\4\11\1\0\4\11\3\0\2\11\11\6"+
    "\300\11\47\0\25\6\4\0\26\11\2\6\6\11\2\6"+
    "\46\11\2\6\6\11\2\6\10\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\37\11\2\6\65\11\1\6"+
    "\7\11\1\6\1\11\3\6\3\11\1\6\7\11\3\6"+
    "\4\11\2\6\6\11\4\6\15\11\5\6\3\11\1\6"+
    "\7\11\16\6\5\0\30\6\2\3\5\0\20\6\2\11"+
    "\23\6\1\11\13\6\5\0\5\6\6\0\1\6\1\11"+
    "\15\6\1\11\20\6\15\11\3\6\33\11\25\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\11\4\6\1\11"+
    "\2\6\12\11\1\6\1\11\3\6\5\11\6\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\56\3\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\51\11\3\6\136\11\21\6\33\11\65\6\306\11\112\6"+
    "\315\11\63\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\31\11\7\6\1\0\120\11\2\0\45\6\11\11"+
    "\2\6\147\11\2\6\4\11\1\6\4\11\14\6\13\11"+
    "\115\6\12\11\1\0\3\11\1\0\4\11\1\0\27\11"+
    "\5\0\20\6\1\11\7\6\64\11\14\6\2\0\62\11"+
    "\21\0\13\6\12\0\6\6\22\0\6\11\3\6\1\11"+
    "\4\6\12\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\46\6\51\11\16\0\11\6\3\11\1\0\10\11\2\0"+
    "\2\6\12\0\6\6\27\11\3\6\1\11\1\0\4\6"+
    "\60\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\6\3\11\2\6\13\11\5\0"+
    "\2\6\3\11\2\0\12\6\6\11\2\6\6\11\2\6"+
    "\6\11\11\6\7\11\1\6\7\11\221\6\43\11\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\11\14\6\27\11"+
    "\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11\46\6"+
    "\7\11\14\6\5\11\5\6\1\11\1\0\12\11\1\6"+
    "\15\11\1\6\5\11\1\6\1\11\1\6\2\11\1\6"+
    "\2\11\1\6\154\11\41\6\153\11\22\6\100\11\2\6"+
    "\66\11\50\6\15\11\3\6\20\0\20\6\7\0\14\6"+
    "\2\11\30\6\3\11\31\6\1\11\6\6\5\11\1\6"+
    "\207\11\2\6\1\0\4\6\1\11\13\6\12\0\7\6"+
    "\32\11\4\6\1\11\1\6\32\11\13\6\131\11\3\6"+
    "\6\11\2\6\6\11\2\6\6\11\2\6\3\11\3\6"+
    "\2\11\3\6\2\11\22\6\3\0\4\6\14\11\1\6"+
    "\32\11\1\6\23\11\1\6\2\11\1\6\17\11\2\6"+
    "\16\11\42\6\173\11\105\6\65\11\210\6\1\0\202\6"+
    "\35\11\3\6\61\11\57\6\37\11\21\6\33\11\65\6"+
    "\36\11\2\6\44\11\4\6\10\11\1\6\5\11\52\6"+
    "\236\11\2\6\12\0\126\6\6\11\2\6\1\11\1\6"+
    "\54\11\1\6\2\11\3\6\1\11\2\6\27\11\252\6"+
    "\26\11\12\6\32\11\106\6\70\11\6\6\2\11\100\6"+
    "\1\11\3\0\1\6\2\0\5\6\4\0\4\11\1\6"+
    "\3\11\1\6\33\11\4\6\3\0\4\6\1\0\40\6"+
    "\35\11\203\6\66\11\12\6\26\11\12\6\23\11\215\6"+
    "\111\11\267\6\3\0\65\11\17\0\37\6\12\0\20\6"+
    "\3\0\55\11\13\0\2\6\1\0\22\6\31\11\7\6"+
    "\12\0\6\6\3\0\44\11\16\0\1\6\12\0\100\6"+
    "\3\0\60\11\16\0\4\11\13\6\12\0\246\6\53\11"+
    "\15\0\10\6\12\0\66\6\157\11\221\6\143\11\235\6"+
    "\57\11\321\6\71\11\307\6\105\11\13\6\1\11\56\0"+
    "\20\6\4\0\15\11\140\6\2\11\u0163\6\5\0\3\6"+
    "\26\0\2\6\7\0\36\6\4\0\224\6\3\0\273\6"+
    "\125\11\1\6\107\11\1\6\2\11\2\6\1\11\2\6"+
    "\2\11\2\6\4\11\1\6\14\11\1\6\1\11\1\6"+
    "\7\11\1\6\101\11\1\6\4\11\2\6\10\11\1\6"+
    "\7\11\1\6\34\11\1\6\4\11\1\6\5\11\1\6"+
    "\1\11\3\6\7\11\1\6\u0154\11\2\6\31\11\1\6"+
    "\31\11\1\6\37\11\1\6\31\11\1\6\37\11\1\6"+
    "\31\11\1\6\37\11\1\6\31\11\1\6\37\11\1\6"+
    "\31\11\1\6\10\11\2\6\62\0\4\11\1\6\33\11"+
    "\1\6\2\11\1\6\1\11\2\6\1\11\1\6\12\11"+
    "\1\6\4\11\1\6\1\11\1\6\1\11\6\6\1\11"+
    "\4\6\1\11\1\6\1\11\1\6\1\11\1\6\3\11"+
    "\1\6\2\11\1\6\1\11\2\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\2\11"+
    "\1\6\1\11\2\6\4\11\1\6\7\11\1\6\4\11"+
    "\1\6\4\11\1\6\1\11\1\6\12\11\1\6\21\11"+
    "\5\6\3\11\1\6\5\11\1\6\21\11\104\6\327\11"+
    "\51\6\65\11\13\6\336\11\343\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21760];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\20\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\1\55\1\0\1\2\1\56\4\57\1\55\1\60"+
    "\1\0\1\61\1\62\1\0\1\63\1\64\1\65\1\66"+
    "\1\67\11\5\1\70\7\5\1\71\24\5\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\2\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\12\75\2\0\1\110\2\57"+
    "\1\0\1\55\2\111\1\112\1\113\1\114\21\5\1\115"+
    "\3\5\1\116\2\5\1\117\21\5\1\120\3\5\1\100"+
    "\1\121\1\122\1\123\2\0\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\0\2\57\1\132\1\111\1\133\3\5"+
    "\1\134\1\135\1\5\1\136\6\5\1\137\4\5\1\140"+
    "\4\5\1\141\1\5\1\142\7\5\1\143\5\5\1\144"+
    "\2\5\1\145\1\146\2\5\1\0\2\57\1\111\2\5"+
    "\1\147\1\150\1\151\1\152\1\153\4\5\1\154\1\155"+
    "\1\156\13\5\1\157\2\5\1\160\2\5\1\161\2\5"+
    "\1\162\1\0\2\57\1\111\4\5\1\163\3\5\1\164"+
    "\2\5\1\165\4\5\1\166\1\167\1\170\1\5\1\171"+
    "\1\5\1\172\2\5\1\0\2\57\1\111\1\5\1\173"+
    "\1\5\1\174\1\175\1\176\3\5\1\177\1\200\1\201"+
    "\5\5\1\0\2\57\1\111\1\202\1\203\4\5\1\204"+
    "\2\5\1\205\1\0\2\57\1\111\2\5\1\206\1\207"+
    "\1\5\1\210\1\0\2\57\1\111\1\211\1\212\1\5"+
    "\1\213\2\57\1\0\1\5\2\57\1\0\1\214\2\57"+
    "\1\0\2\57\1\0\2\57\1\0\2\57\1\0\1\57"+
    "\1\55\1\0\1\55\1\0\4\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\325\0\u011c\0\u0163\0\325"+
    "\0\u01aa\0\u01f1\0\u0238\0\325\0\325\0\325\0\u027f\0\u02c6"+
    "\0\325\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429\0\325\0\325"+
    "\0\u0470\0\u04b7\0\u04fe\0\325\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\u0899\0\u08e0\0\u0927\0\u096e\0\325\0\325\0\u09b5\0\325"+
    "\0\u09fc\0\325\0\325\0\u0a43\0\325\0\u0a8a\0\325\0\u0ad1"+
    "\0\u0b18\0\325\0\u0b5f\0\u0ba6\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\u0bed\0\325\0\u0c34"+
    "\0\u0c7b\0\u0cc2\0\325\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\325\0\u0e6c\0\325\0\325\0\u0eb3\0\u0efa\0\325\0\325"+
    "\0\325\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323"+
    "\0\u136a\0\u13b1\0\u13f8\0\u01aa\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\u19cb\0\u1a12"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\325\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\325\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\325\0\325\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u01aa\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u01aa\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u01aa"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\325\0\325\0\325\0\325\0\u1b2e"+
    "\0\u2b8b\0\325\0\325\0\325\0\325\0\325\0\325\0\u2bd2"+
    "\0\u2c19\0\u2c60\0\325\0\u2ca7\0\325\0\u2cee\0\u2d35\0\u2d7c"+
    "\0\u01aa\0\u01aa\0\u2dc3\0\u01aa\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u2f6d\0\u01aa\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u01aa"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u01aa\0\u31ec\0\u01aa\0\u3233"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u01aa\0\u3424"+
    "\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u01aa\0\u3587\0\u35ce\0\u01aa"+
    "\0\u01aa\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf"+
    "\0\u3806\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u01aa\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u01aa\0\u3969\0\u01aa\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u01aa\0\u3cbd\0\u3d04\0\u01aa\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u01aa\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u01aa\0\u40e6\0\u412d\0\u4174\0\u01aa\0\u41bb"+
    "\0\u4202\0\u01aa\0\u4249\0\u4290\0\u42d7\0\u431e\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u4365\0\u01aa\0\u43ac\0\u01aa\0\u43f3\0\u443a\0\u4481"+
    "\0\u44c8\0\u450f\0\u4556\0\u459d\0\u01aa\0\u45e4\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u462b\0\u4672\0\u46b9\0\u01aa\0\u01aa\0\u01aa\0\u4700"+
    "\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938"+
    "\0\u01aa\0\u01aa\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u01aa\0\u4a9b"+
    "\0\u4ae2\0\u01aa\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u01aa\0\u01aa\0\u4cd3\0\u01aa\0\u4d1a\0\u4d61\0\u4da8\0\u4def"+
    "\0\u01aa\0\u01aa\0\u4e36\0\325\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\u4f99\0\u4fe0\0\u5027\0\u01aa\0\u506e\0\u50b5\0\u50fc\0\u5143"+
    "\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b"+
    "\0\u53c2\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u5525\0\u556c"+
    "\0\u55b3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\11\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\11\1\44\1\11\1\45\1\11"+
    "\1\46\1\11\1\47\1\11\1\50\1\51\1\52\1\11"+
    "\1\53\1\54\3\11\1\55\1\4\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\4\2\64\1\65\2\64\1\66"+
    "\2\64\1\67\66\64\1\70\7\64\2\71\1\72\2\71"+
    "\1\73\6\71\1\4\62\71\1\74\7\71\111\0\1\5"+
    "\146\0\1\75\44\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\31\11\10\0\1\11\42\0\1\76\57\0\1\77"+
    "\26\0\1\100\63\0\1\101\22\0\1\102\64\0\1\103"+
    "\21\0\1\104\66\0\1\105\4\0\1\106\12\0\1\107"+
    "\71\0\12\110\67\0\1\111\4\0\1\112\15\0\1\113"+
    "\67\0\1\110\1\0\1\114\1\115\2\116\4\117\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\124\13\0\1\125"+
    "\36\0\1\110\1\0\12\26\11\0\1\121\1\122\1\123"+
    "\4\0\1\124\70\0\1\126\1\127\106\0\1\130\106\0"+
    "\1\131\1\132\43\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\1\11\1\133\27\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\15\11\1\134\2\11\1\135\6\11"+
    "\1\136\1\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\1\137\6\11\1\140\2\11\1\141\2\11\1\142"+
    "\13\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\4\11\1\143\10\11\1\144\13\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\12\11\1\145\13\11\1\146"+
    "\2\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\147\7\11\1\150\1\11\1\151\2\11\1\152\13\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\15\11"+
    "\1\153\13\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\5\11\1\154\5\11\1\155\1\156\14\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\15\11\1\157"+
    "\13\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\160\3\11\1\161\16\11\1\162\5\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\1\163\17\11\1\164"+
    "\2\11\1\165\5\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\4\11\1\166\24\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\7\11\1\167\7\11\1\170"+
    "\2\11\1\171\1\172\1\11\1\173\1\11\1\174\1\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\7\11"+
    "\1\175\10\11\1\176\10\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\15\11\1\177\13\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\7\11\1\200\21\11"+
    "\10\0\1\11\42\0\1\201\106\0\1\202\40\0\1\203"+
    "\3\0\2\64\1\0\2\64\1\0\2\64\1\0\66\64"+
    "\1\0\7\64\2\0\1\65\104\0\2\204\4\0\2\204"+
    "\1\205\3\204\1\206\10\204\4\207\4\210\11\204\1\211"+
    "\3\204\1\212\6\204\1\213\3\204\1\214\1\204\1\215"+
    "\7\204\1\216\6\204\15\0\1\217\74\0\1\72\104\0"+
    "\2\204\4\0\2\204\1\220\3\204\1\221\10\204\4\222"+
    "\4\223\11\204\1\224\3\204\1\225\6\204\1\226\3\204"+
    "\1\227\1\204\1\230\7\204\1\231\6\204\27\0\1\232"+
    "\105\0\12\110\11\0\1\121\1\122\1\123\34\0\17\111"+
    "\1\233\67\111\2\112\1\5\2\112\1\6\101\112\23\0"+
    "\1\110\1\0\1\114\1\115\2\116\4\117\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\52\0\1\110\1\0"+
    "\10\117\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\52\0\1\110\1\0\10\235\2\120\11\0\1\121\1\122"+
    "\1\123\4\0\1\234\52\0\1\110\1\0\10\236\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\12\120\11\0\1\121\1\122\1\123\54\0\1\237"+
    "\1\0\1\237\2\0\12\240\75\0\1\241\11\242\6\0"+
    "\6\242\76\0\1\243\106\0\1\244\1\245\43\0\1\11"+
    "\10\0\1\11\13\0\12\11\6\0\21\11\1\246\7\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\15\11"+
    "\1\247\13\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\4\11\1\250\24\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\22\11\1\251\6\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\21\11\1\252\1\253"+
    "\6\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\254\30\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\1\255\3\11\1\256\24\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\14\11\1\257\14\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\5\11\1\260"+
    "\23\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\23\11\1\261\5\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\21\11\1\262\7\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\22\11\1\263\6\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\12\11\1\264"+
    "\16\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\14\11\1\265\14\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\15\11\1\266\13\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\20\11\1\267\10\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\22\11\1\270"+
    "\6\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\16\11\1\271\12\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\21\11\1\272\1\273\6\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\14\11\1\274\14\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\22\11"+
    "\1\275\6\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\25\11\1\276\3\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\12\11\1\277\16\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\2\11\1\300\26\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\10\11"+
    "\1\301\4\11\1\302\13\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\1\11\1\303\27\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\22\11\1\304\6\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\15\11"+
    "\1\305\13\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\20\11\1\306\10\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\1\307\17\11\1\310\10\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\16\11\1\311"+
    "\12\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\10\11\1\312\20\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\14\11\1\313\14\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\10\11\1\314\7\11\1\315"+
    "\10\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\316\22\11\1\317\3\11\1\320\1\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\10\11\1\321\1\11"+
    "\1\322\16\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\10\11\1\323\20\11\10\0\1\11\25\0\10\210"+
    "\77\0\10\324\66\0\1\325\106\0\1\326\106\0\1\327"+
    "\10\0\10\330\66\0\1\327\10\0\10\331\66\0\1\332"+
    "\106\0\1\333\106\0\1\334\106\0\1\335\106\0\1\336"+
    "\106\0\1\337\123\0\1\340\55\0\17\111\1\233\4\111"+
    "\1\5\62\111\23\0\1\110\1\0\10\341\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\52\0\1\110\1\0"+
    "\10\342\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\54\0\12\240\75\0\12\240\11\0\1\121\1\0\1\123"+
    "\61\0\1\241\11\242\6\0\6\242\4\0\1\343\54\0"+
    "\12\344\6\0\6\344\4\0\1\343\71\0\1\345\44\0"+
    "\1\11\10\0\1\11\13\0\12\11\6\0\22\11\1\346"+
    "\6\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\12\11\1\347\16\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\1\350\30\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\4\11\1\351\24\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\4\11\1\352\24\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\2\11"+
    "\1\353\26\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\20\11\1\354\10\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\21\11\1\355\7\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\1\356\30\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\21\11\1\357"+
    "\1\360\6\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\1\361\30\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\1\11\1\362\27\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\4\11\1\363\24\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\4\11\1\364"+
    "\24\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\21\11\1\365\7\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\1\366\30\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\1\367\30\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\15\11\1\370\13\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\12\11\1\371"+
    "\2\11\1\372\13\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\22\11\1\373\6\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\4\11\1\374\24\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\1\375"+
    "\22\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\10\11\1\376\20\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\12\11\1\377\16\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\11\11\1\u0100\17\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\14\11\1\u0101"+
    "\7\11\1\u0102\4\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\22\11\1\u0103\6\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\12\11\1\u0104\16\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\23\11\1\u0105"+
    "\5\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\20\11\1\u0106\10\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\22\11\1\u0107\6\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\22\11\1\u0108\6\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\10\11\1\u0109"+
    "\20\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\4\11\1\u010a\24\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\22\11\1\u010b\6\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\2\11\1\u010c\26\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\21\11\1\u010d"+
    "\7\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\15\11\1\u010e\13\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\14\11\1\u010f\14\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\4\11\1\u0110\24\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\3\11\1\u0111"+
    "\25\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\u0112\30\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\12\11\1\u0113\16\11\10\0\1\11\14\0\1\327"+
    "\126\0\1\u0114\75\0\1\110\1\0\10\u0115\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\52\0\1\110\1\0"+
    "\10\u0116\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\54\0\12\u0117\6\0\6\u0117\4\0\1\343\27\0\1\11"+
    "\10\0\1\11\13\0\12\11\6\0\20\11\1\u0118\10\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\4\11"+
    "\1\u0119\24\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\11\11\1\u011a\17\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\7\11\1\u011b\21\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\21\11\1\u011c\7\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\20\11"+
    "\1\u011d\10\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\22\11\1\u011e\6\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\10\11\1\u011f\20\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\23\11\1\u0120\5\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\12\11"+
    "\1\u0121\16\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\14\11\1\u0122\14\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\4\11\1\u0123\24\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\12\11\1\u0124\16\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\22\11"+
    "\1\u0125\6\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\4\11\1\u0126\24\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\20\11\1\u0127\10\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\1\u0128\30\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\20\11\1\u0129"+
    "\10\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\24\11\1\u012a\4\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\1\u012b\30\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\22\11\1\u012c\6\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\1\u012d\30\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\4\11\1\u012e"+
    "\24\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\10\11\1\u012f\20\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\20\11\1\u0130\10\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\22\11\1\u0131\6\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\10\11\1\u0132"+
    "\20\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\2\11\1\u0133\26\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\20\11\1\u0134\10\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\2\11\1\u0135\26\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\7\11\1\u0136"+
    "\21\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\25\11\1\u0137\3\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\21\11\1\u0138\7\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\22\11\1\u0139\6\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\4\11\1\u013a"+
    "\24\11\10\0\1\11\31\0\1\u013b\100\0\1\110\1\0"+
    "\10\u013c\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\52\0\1\110\1\0\10\u013d\2\120\11\0\1\121\1\122"+
    "\1\123\4\0\1\234\54\0\12\u013e\6\0\6\u013e\4\0"+
    "\1\343\27\0\1\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\u013f\30\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\1\u0140\30\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\14\11\1\u0141\14\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\12\11\1\u0142\16\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\4\11\1\u0143"+
    "\24\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\3\11\1\u0144\25\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\12\11\1\u0145\16\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\13\11\1\u0146\15\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\22\11\1\u0147"+
    "\6\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\14\11\1\u0148\14\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\5\11\1\u0149\23\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\4\11\1\u014a\24\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\6\11\1\u014b"+
    "\22\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\12\11\1\u014c\16\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\22\11\1\u014d\6\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\2\11\1\u014e\26\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\2\11\1\u014f"+
    "\26\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\14\11\1\u0150\14\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\2\11\1\u0151\26\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\22\11\1\u0152\6\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\7\11\1\u0153"+
    "\21\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\20\11\1\u0154\10\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\21\11\1\u0155\7\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\10\11\1\u0156\20\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\10\11\1\u0157"+
    "\20\11\10\0\1\11\35\0\1\u0158\74\0\1\110\1\0"+
    "\10\u0159\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\52\0\1\110\1\0\10\u015a\2\120\11\0\1\121\1\122"+
    "\1\123\4\0\1\234\54\0\12\u015b\6\0\6\u015b\4\0"+
    "\1\343\27\0\1\11\10\0\1\11\13\0\12\11\6\0"+
    "\2\11\1\u015c\26\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\14\11\1\u015d\14\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\23\11\1\u015e\5\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\22\11\1\u015f"+
    "\6\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\21\11\1\u0160\7\11\10\0\2\11\10\0\1\11\13\0"+
    "\12\11\6\0\27\11\1\u0161\1\11\10\0\2\11\10\0"+
    "\1\11\13\0\12\11\6\0\4\11\1\u0162\24\11\10\0"+
    "\2\11\10\0\1\11\13\0\12\11\6\0\2\11\1\u0163"+
    "\26\11\10\0\2\11\10\0\1\11\13\0\12\11\6\0"+
    "\1\u0164\30\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\4\11\1\u0165\24\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\14\11\1\u0166\14\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\4\11\1\u0167\24\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\22\11"+
    "\1\u0168\6\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\5\11\1\u0169\23\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\15\11\1\u016a\13\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\4\11\1\u016b\24\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\12\11"+
    "\1\u016c\16\11\10\0\1\11\30\0\1\u016d\101\0\1\110"+
    "\1\0\10\u016e\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\52\0\1\110\1\0\10\u016f\2\120\11\0\1\121"+
    "\1\122\1\123\4\0\1\234\54\0\12\u0170\6\0\6\u0170"+
    "\4\0\1\343\27\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\22\11\1\u0171\6\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\4\11\1\u0172\24\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\14\11\1\u0173\14\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\4\11"+
    "\1\u0174\24\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\2\11\1\u0175\26\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\4\11\1\u0176\24\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\16\11\1\u0177\12\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\14\11"+
    "\1\u0178\14\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\14\11\1\u0179\14\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\4\11\1\u017a\24\11\10\0\1\11"+
    "\33\0\1\u017b\76\0\1\110\1\0\10\u017c\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\52\0\1\110\1\0"+
    "\10\u017d\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\54\0\12\u017e\6\0\6\u017e\4\0\1\343\27\0\1\11"+
    "\10\0\1\11\13\0\12\11\6\0\22\11\1\u017f\6\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\15\11"+
    "\1\u0180\13\11\10\0\2\11\10\0\1\11\13\0\12\11"+
    "\6\0\4\11\1\u0181\24\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\3\11\1\u0182\25\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\10\11\1\u0183\20\11"+
    "\10\0\2\11\10\0\1\11\13\0\12\11\6\0\22\11"+
    "\1\u0184\6\11\10\0\1\11\31\0\1\u0185\100\0\1\110"+
    "\1\0\10\u0186\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\52\0\1\110\1\0\10\u0187\2\120\11\0\1\121"+
    "\1\122\1\123\4\0\1\234\54\0\12\u0188\6\0\6\u0188"+
    "\4\0\1\343\27\0\1\11\10\0\1\11\13\0\12\11"+
    "\6\0\21\11\1\u0189\7\11\10\0\2\11\10\0\1\11"+
    "\13\0\12\11\6\0\5\11\1\u018a\23\11\10\0\2\11"+
    "\10\0\1\11\13\0\12\11\6\0\30\11\1\u018b\10\0"+
    "\1\11\35\0\1\u018c\74\0\1\110\1\0\10\u018d\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\10\u018e\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\54\0\12\u018f\6\0\6\u018f\4\0\1\343\27\0"+
    "\1\11\10\0\1\11\13\0\12\11\6\0\4\11\1\u0190"+
    "\24\11\10\0\1\11\23\0\1\110\1\0\10\u0191\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\10\u0192\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\54\0\12\u0193\6\0\6\u0193\4\0\1\343\27\0"+
    "\1\11\10\0\1\11\13\0\12\11\6\0\3\11\1\u0194"+
    "\25\11\10\0\1\11\23\0\1\110\1\0\10\u0195\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\10\u0196\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\54\0\12\u0197\6\0\6\u0197\4\0\1\343\52\0"+
    "\1\110\1\0\10\u0198\2\120\11\0\1\121\1\122\1\123"+
    "\4\0\1\234\52\0\1\110\1\0\10\u0199\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\54\0\12\u019a\6\0"+
    "\6\u019a\4\0\1\343\52\0\1\110\1\0\10\u019b\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\10\u019c\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\54\0\12\u019d\6\0\6\u019d\4\0\1\343\52\0"+
    "\1\110\1\0\10\u019e\2\120\11\0\1\121\1\122\1\123"+
    "\4\0\1\234\52\0\1\110\1\0\10\u019f\2\120\11\0"+
    "\1\121\1\122\1\123\4\0\1\234\54\0\12\u01a0\6\0"+
    "\6\u01a0\4\0\1\343\52\0\1\110\1\0\10\u01a1\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\10\u01a2\2\120\11\0\1\121\1\122\1\123\4\0"+
    "\1\234\54\0\12\u01a3\6\0\6\u01a3\4\0\1\343\52\0"+
    "\1\110\1\0\10\u01a4\2\120\11\0\1\121\1\122\1\123"+
    "\4\0\1\234\54\0\12\u01a5\6\0\6\u01a5\4\0\1\343"+
    "\52\0\1\110\1\0\10\u01a6\2\120\11\0\1\121\1\122"+
    "\1\123\4\0\1\234\106\0\1\343\52\0\1\110\1\0"+
    "\10\u01a7\2\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\52\0\1\110\1\0\10\u01a8\2\120\11\0\1\121\1\122"+
    "\1\123\4\0\1\234\52\0\1\110\1\0\10\u01a9\2\120"+
    "\11\0\1\121\1\122\1\123\4\0\1\234\52\0\1\110"+
    "\1\0\12\120\11\0\1\121\1\122\1\123\4\0\1\234"+
    "\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22010];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\20\1\2\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\11\11\1\0\1\11\1\1\1\0\1\1\1\11"+
    "\5\1\1\11\1\0\2\11\1\0\1\1\3\11\47\1"+
    "\6\11\2\1\7\11\12\1\2\0\1\11\2\1\1\0"+
    "\3\1\2\11\57\1\4\11\2\0\6\11\1\0\2\1"+
    "\1\11\1\1\1\11\56\1\1\0\46\1\1\0\34\1"+
    "\1\0\24\1\1\0\15\1\1\0\11\1\1\0\6\1"+
    "\1\11\2\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          // fall through
          case 141: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 142: break;
          case 3:
            { return symbol(NOT);
            }
          // fall through
          case 143: break;
          case 4:
            { yybegin(STRING); string.setLength(0);
            }
          // fall through
          case 144: break;
          case 5:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 145: break;
          case 6:
            { return symbol(MOD);
            }
          // fall through
          case 146: break;
          case 7:
            { return symbol(AND);
            }
          // fall through
          case 147: break;
          case 8:
            { yybegin(CHARLITERAL);
            }
          // fall through
          case 148: break;
          case 9:
            { return symbol(LPAREN);
            }
          // fall through
          case 149: break;
          case 10:
            { return symbol(RPAREN);
            }
          // fall through
          case 150: break;
          case 11:
            { return symbol(MULT);
            }
          // fall through
          case 151: break;
          case 12:
            { return symbol(PLUS);
            }
          // fall through
          case 152: break;
          case 13:
            { return symbol(COMMA);
            }
          // fall through
          case 153: break;
          case 14:
            { return symbol(MINUS);
            }
          // fall through
          case 154: break;
          case 15:
            { return symbol(DOT);
            }
          // fall through
          case 155: break;
          case 16:
            { return symbol(DIV);
            }
          // fall through
          case 156: break;
          case 17:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
          // fall through
          case 157: break;
          case 18:
            { return symbol(COLON);
            }
          // fall through
          case 158: break;
          case 19:
            { return symbol(SEMICOLON);
            }
          // fall through
          case 159: break;
          case 20:
            { return symbol(LT);
            }
          // fall through
          case 160: break;
          case 21:
            { return symbol(EQ);
            }
          // fall through
          case 161: break;
          case 22:
            { return symbol(GT);
            }
          // fall through
          case 162: break;
          case 23:
            { return symbol(QUESTION);
            }
          // fall through
          case 163: break;
          case 24:
            { return symbol(LBRACK);
            }
          // fall through
          case 164: break;
          case 25:
            { return symbol(RBRACK);
            }
          // fall through
          case 165: break;
          case 26:
            { return symbol(XOR);
            }
          // fall through
          case 166: break;
          case 27:
            { return symbol(LBRACE);
            }
          // fall through
          case 167: break;
          case 28:
            { return symbol(OR);
            }
          // fall through
          case 168: break;
          case 29:
            { return symbol(RBRACE);
            }
          // fall through
          case 169: break;
          case 30:
            { return symbol(COMP);
            }
          // fall through
          case 170: break;
          case 31:
            { string.append( yytext() );
            }
          // fall through
          case 171: break;
          case 32:
            { throw new RuntimeException("Unterminated string at end of line");
            }
          // fall through
          case 172: break;
          case 33:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          // fall through
          case 173: break;
          case 34:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          // fall through
          case 174: break;
          case 35:
            { return symbol(NOTEQ);
            }
          // fall through
          case 175: break;
          case 36:
            { return symbol(MODEQ);
            }
          // fall through
          case 176: break;
          case 37:
            { return symbol(ANDAND);
            }
          // fall through
          case 177: break;
          case 38:
            { return symbol(ANDEQ);
            }
          // fall through
          case 178: break;
          case 39:
            { return symbol(POW);
            }
          // fall through
          case 179: break;
          case 40:
            { return symbol(MULTEQ);
            }
          // fall through
          case 180: break;
          case 41:
            { return symbol(PLUSPLUS);
            }
          // fall through
          case 181: break;
          case 42:
            { return symbol(PLUSEQ);
            }
          // fall through
          case 182: break;
          case 43:
            { return symbol(MINUSMINUS);
            }
          // fall through
          case 183: break;
          case 44:
            { return symbol(MINUSEQ);
            }
          // fall through
          case 184: break;
          case 45:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          // fall through
          case 185: break;
          case 46:
            { return symbol(DIVEQ);
            }
          // fall through
          case 186: break;
          case 47:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
          // fall through
          case 187: break;
          case 48:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 188: break;
          case 49:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 189: break;
          case 50:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          // fall through
          case 190: break;
          case 51:
            { return symbol(LSHIFT);
            }
          // fall through
          case 191: break;
          case 52:
            { return symbol(LTEQ);
            }
          // fall through
          case 192: break;
          case 53:
            { return symbol(EQEQ);
            }
          // fall through
          case 193: break;
          case 54:
            { return symbol(GTEQ);
            }
          // fall through
          case 194: break;
          case 55:
            { return symbol(RSHIFT);
            }
          // fall through
          case 195: break;
          case 56:
            { return symbol(DO);
            }
          // fall through
          case 196: break;
          case 57:
            { return symbol(IF);
            }
          // fall through
          case 197: break;
          case 58:
            { return symbol(XOREQ);
            }
          // fall through
          case 198: break;
          case 59:
            { return symbol(OREQ);
            }
          // fall through
          case 199: break;
          case 60:
            { return symbol(OROR);
            }
          // fall through
          case 200: break;
          case 61:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          // fall through
          case 201: break;
          case 62:
            { string.append( '\"' );
            }
          // fall through
          case 202: break;
          case 63:
            { string.append( '\'' );
            }
          // fall through
          case 203: break;
          case 64:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          // fall through
          case 204: break;
          case 65:
            { string.append( '\b' );
            }
          // fall through
          case 205: break;
          case 66:
            { string.append( '\f' );
            }
          // fall through
          case 206: break;
          case 67:
            { string.append( '\n' );
            }
          // fall through
          case 207: break;
          case 68:
            { string.append( '\r' );
            }
          // fall through
          case 208: break;
          case 69:
            { string.append( '\t' );
            }
          // fall through
          case 209: break;
          case 70:
            { string.append( '\\' );
            }
          // fall through
          case 210: break;
          case 71:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          // fall through
          case 211: break;
          case 72:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          // fall through
          case 212: break;
          case 73:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
          // fall through
          case 213: break;
          case 74:
            { return symbol(LSHIFTEQ);
            }
          // fall through
          case 214: break;
          case 75:
            { return symbol(RSHIFTEQ);
            }
          // fall through
          case 215: break;
          case 76:
            { return symbol(URSHIFT);
            }
          // fall through
          case 216: break;
          case 77:
            { return symbol(FOR);
            }
          // fall through
          case 217: break;
          case 78:
            { return symbol(INT);
            }
          // fall through
          case 218: break;
          case 79:
            { return symbol(NEW);
            }
          // fall through
          case 219: break;
          case 80:
            { return symbol(TRY);
            }
          // fall through
          case 220: break;
          case 81:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          // fall through
          case 221: break;
          case 82:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          // fall through
          case 222: break;
          case 83:
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
            }
          // fall through
          case 223: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          // fall through
          case 224: break;
          case 85:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          // fall through
          case 225: break;
          case 86:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          // fall through
          case 226: break;
          case 87:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          // fall through
          case 227: break;
          case 88:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          // fall through
          case 228: break;
          case 89:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          // fall through
          case 229: break;
          case 90:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          // fall through
          case 230: break;
          case 91:
            { return symbol(URSHIFTEQ);
            }
          // fall through
          case 231: break;
          case 92:
            { return symbol(BYTE);
            }
          // fall through
          case 232: break;
          case 93:
            { return symbol(CASE);
            }
          // fall through
          case 233: break;
          case 94:
            { return symbol(CHAR);
            }
          // fall through
          case 234: break;
          case 95:
            { return symbol(ELSE);
            }
          // fall through
          case 235: break;
          case 96:
            { return symbol(GOTO);
            }
          // fall through
          case 236: break;
          case 97:
            { return symbol(LONG);
            }
          // fall through
          case 237: break;
          case 98:
            { return symbol(NULL_LITERAL);
            }
          // fall through
          case 238: break;
          case 99:
            { return symbol(SQRT);
            }
          // fall through
          case 239: break;
          case 100:
            { return symbol(THIS);
            }
          // fall through
          case 240: break;
          case 101:
            { return symbol(BOOLEAN_LITERAL, true);
            }
          // fall through
          case 241: break;
          case 102:
            { return symbol(VOID);
            }
          // fall through
          case 242: break;
          case 103:
            { return symbol(BREAK);
            }
          // fall through
          case 243: break;
          case 104:
            { return symbol(CATCH);
            }
          // fall through
          case 244: break;
          case 105:
            { return symbol(CLASS);
            }
          // fall through
          case 245: break;
          case 106:
            { return symbol(CLEAR);
            }
          // fall through
          case 246: break;
          case 107:
            { return symbol(CONST);
            }
          // fall through
          case 247: break;
          case 108:
            { return symbol(BOOLEAN_LITERAL, false);
            }
          // fall through
          case 248: break;
          case 109:
            { return symbol(FINAL);
            }
          // fall through
          case 249: break;
          case 110:
            { return symbol(FLOAT);
            }
          // fall through
          case 250: break;
          case 111:
            { return symbol(SHORT);
            }
          // fall through
          case 251: break;
          case 112:
            { return symbol(SUPER);
            }
          // fall through
          case 252: break;
          case 113:
            { return symbol(THROW);
            }
          // fall through
          case 253: break;
          case 114:
            { return symbol(WHILE);
            }
          // fall through
          case 254: break;
          case 115:
            { return symbol(DOUBLE);
            }
          // fall through
          case 255: break;
          case 116:
            { return symbol(IMPORT);
            }
          // fall through
          case 256: break;
          case 117:
            { return symbol(NATIVE);
            }
          // fall through
          case 257: break;
          case 118:
            { return symbol(PUBLIC);
            }
          // fall through
          case 258: break;
          case 119:
            { return symbol(RETURN);
            }
          // fall through
          case 259: break;
          case 120:
            { return symbol(STATIC);
            }
          // fall through
          case 260: break;
          case 121:
            { return symbol(SWITCH);
            }
          // fall through
          case 261: break;
          case 122:
            { return symbol(THROWS);
            }
          // fall through
          case 262: break;
          case 123:
            { return symbol(BOOLEAN);
            }
          // fall through
          case 263: break;
          case 124:
            { return symbol(DEFAULT);
            }
          // fall through
          case 264: break;
          case 125:
            { return symbol(EXTENDS);
            }
          // fall through
          case 265: break;
          case 126:
            { return symbol(FINALLY);
            }
          // fall through
          case 266: break;
          case 127:
            { return symbol(PACKAGE);
            }
          // fall through
          case 267: break;
          case 128:
            { return symbol(PRINTLN);
            }
          // fall through
          case 268: break;
          case 129:
            { return symbol(PRIVATE);
            }
          // fall through
          case 269: break;
          case 130:
            { return symbol(ABSTRACT);
            }
          // fall through
          case 270: break;
          case 131:
            { return symbol(CONTINUE);
            }
          // fall through
          case 271: break;
          case 132:
            { return symbol(STRICTFP);
            }
          // fall through
          case 272: break;
          case 133:
            { return symbol(VOLATILE);
            }
          // fall through
          case 273: break;
          case 134:
            { return symbol(INTERFACE);
            }
          // fall through
          case 274: break;
          case 135:
            { return symbol(PROTECTED);
            }
          // fall through
          case 275: break;
          case 136:
            { return symbol(TRANSIENT);
            }
          // fall through
          case 276: break;
          case 137:
            { return symbol(IMPLEMENTS);
            }
          // fall through
          case 277: break;
          case 138:
            { return symbol(INSTANCEOF);
            }
          // fall through
          case 278: break;
          case 139:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
          // fall through
          case 279: break;
          case 140:
            { return symbol(SYNCHRONIZED);
            }
          // fall through
          case 280: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
